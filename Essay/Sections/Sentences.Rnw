\section{Sentences per Turn (Turn Density)}

<<>>=
### CONSECUTIVE SENTENCES ------------------------------------------------------
# Consecutive Sentences by Turn
republic_turn_conseq <- nested_dialogue %>% 
  add_count(turn) %>%
  distinct(speaker, turn, n)

republic_turn_conseq <- republic_turn_conseq %>%
  add_column(index = c(1:nrow(republic_turn_conseq)),
             .before = "speaker")

# Gather turn Data
cleitophon_conseq <- republic_turn_conseq %>%
  filter(str_detect(speaker, "Cleitophon") == T)
glaucon_conseq <- republic_turn_conseq %>%
  filter(str_detect(speaker, "Glaucon") == T)
polemarchus_conseq <- republic_turn_conseq %>%
  filter(str_detect(speaker, "Polemarchus") == T)
socrates_conseq <- republic_turn_conseq %>%
  filter(str_detect(speaker, "Socrates") == T)
thrasymachus_conseq <- republic_turn_conseq %>%
  filter(str_detect(speaker, "Thrasymachus") == T)

# Generate table from data
lot <- tibble(
  speaker = c("global", "cleitophon", "glaucon", "polemarchus", "socrates", "thrasymacus"),
  mean = c(mean(republic_turn_conseq$n),
                mean(cleitophon_conseq$n),
                mean(glaucon_conseq$n),
                mean(polemarchus_conseq$n),
                mean(socrates_conseq$n),
                mean(thrasymachus_conseq$n)),
  median = c(median(republic_turn_conseq$n),
             median(cleitophon_conseq$n),
             median(glaucon_conseq$n),
             median(polemarchus_conseq$n),
             median(socrates_conseq$n),
             median(thrasymachus_conseq$n)),
  mode = c(find_mode(republic_turn_conseq$n),
           find_mode(cleitophon_conseq$n),
           find_mode(glaucon_conseq$n),
           find_mode(polemarchus_conseq$n),
           find_mode(socrates_conseq$n),
           find_mode(thrasymachus_conseq$n)),
  sd = c(sd(republic_turn_conseq$n),
         sd(cleitophon_conseq$n),
         sd(glaucon_conseq$n),
         sd(polemarchus_conseq$n),
         sd(socrates_conseq$n),
         sd(thrasymachus_conseq$n))
)

rm(cleitophon_conseq,
   glaucon_conseq,
   polemarchus_conseq,
   socrates_conseq,
   thrasymachus_conseq)
@


The first portion of the code tallies the number of sentences per turn, hoping
to identify a correlation between turn ``density'' and the occurrence of phase
transitions. It counts the data in two ways. First, it gathers ``global''
calculations, i.e., the relevant information from the entire dialogue, and
second, it gathers speaker-by-speaker calculations. In order to construct a
high-level view of turn density, the script returns a table of calculations.
The mean represents the average number of sentences per turn, the median
represents the middle value when the data is organized numerically, and the mode
represents the middle value when organized. The standard deviation represents
the overall variation within the data.

The table shows notably regular results. Each speaker's average sentence
density is close to the global, $\bar{x}_g = 1.68$. Cleitophon and Socrates
deviate the most, $\bar{x}_c = 1.33$ and $\bar{x}_s = 1.99$, respectively, but
the variations are slight, making it difficult to tell what difference is
significant. The script performs a t-test comparing the global mean to each
speaker's to solve this problem. This test will return a figure called a
p-value for each speaker. For the purposes of this study, if a p-value is less
than .05, then the difference between the speaker's mean and the global mean are
significantly different.

<<echo = F>>=
for (i in c(2:6)) {
  val <- t.test(c(lot$mean[1], lot$mean[i]))$p.value
  paste(lot$speaker[i], val, sep = ": ") %>%
    print()
  }
@

