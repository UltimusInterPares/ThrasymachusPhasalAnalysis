\documentclass{beamer}
\usetheme{Hannover}
\setbeamercovered{transparent}
\renewcommand{\Roman}[1]{$\overline{\textsf{\small{\MakeUppercase{\romannumeral #1}}}}$}
\setbeamertemplate{navigation symbols}{}


% Chicago Bibliography Formatting
\usepackage[
  autocite = footnote,
  sorting=ynt,
  annotation]
  {biblatex-chicago}
   
\renewcommand{\bibfont}{\normalsize}
\addbibresource{Bibliography.bib}

% Language and Text Formatting
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{microtype}
\usepackage[greek, english]{babel}
  \babeltags{en = english}
  \babeltags{el = greek}
\usepackage{csquotes} %idk, babel asks for it ¯\_(ツ)_/¯
\usepackage{teubner}


% Figure Formatting
\usepackage{multicol}
\usepackage{booktabs}
\usepackage{graphicx}
\usepackage{tikz}

% Title Page
\title{This Great Flood of Words\thanks{Rep. 1: 344 d1}}
\author{Thomas Broadwater}
\date{\today}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\SweaveOpts{concordance=TRUE}

\begin{frame}
\titlepage
\end{frame}

<<Packages, echo = F>>=
library(tidyverse) # Tidy data
library(tidytext)  # Text mining (unnest_tokens)
library(stringr)   # Text manipulation
library(dplyr)     # Data manipulation
library(readxl)    # Importing .xml's
library(janitor)   # Cleaning data frames
library(textdata)  # Access the AFINN sentiment dictionary
library(patchwork) # Free faceting of figures
@

<<Importing, echo = F>>=
### IMPORTING DATA -------------------------------------------------------------
# Import the Raw Data Set
nested_dialogue <- read_excel("/Users/thomasbroadwater/Documents/UGA/Classes/Spring22/Plato/PhasalAnalysis/ThrasymachusPhasalAnalysis/SocVsThrasEx.xlsx", sheet = "Typology ") %>%
  as_tibble() %>%
  clean_names()

# Prepare for data analysis: one-token-per-row format
# Include the column "index" for easier re-organization down the line
unnested_dialogue <- nested_dialogue %>%
  unnest_tokens(word, text)
unnested_dialogue <- unnested_dialogue %>%
  add_column(index = c(1:nrow(unnested_dialogue)),
             .before = "start_page")

# Color blind-safe palette to be used later
cbPalette <- c("#999999", "#E69F00", "#F0E442", "#009E73", "#56B4E9", "#0072B2", "#D55E00", "#CC79A7")
@

<<Function Definition, echo = F>>=
### Functions ------------------------------------------------------------------
find_mode <- function(x) {
  u <- unique(x)
  tab <- tabulate(match(x, u))
  
  if (length(u[tab == max(tab)]) > 1) {NA}
  else {u[tab == max(tab)]}
  
}
@

\section{Introduction} % ----------------------------------------------------- %

\subsection{Phasal Analysis} % - - - - - - - - - - - - - - - - - - - - - - - - %

\begin{frame}
\frametitle{Phasal Analysis \Roman{1}}
\begin{itemize}
\item Register: style based on context
\item Phase: like a subregister
  \begin{itemize}
  \item unit of discourse
  \item consistent style based on specifics
    \begin{itemize}
    \item familiarity, topic, venue, etc.
  \end{itemize}
  \end{itemize}
\end{itemize}
\end{frame}



\begin{frame}
\frametitle{Phasal Analysis \Roman{2}}
\begin{itemize}
\item Phases: characterized by shared features
  \begin{itemize}
  \item word choice, mood (indicative, imperative, etc.)
  \item topic, sentence length
  \end{itemize}
\end{itemize}
\end{frame}



\begin{frame}
\frametitle{Goals}
\begin{enumerate}
\item broad phasal analysis of Rep.1
\item demonstration of programmatic methods
\end{enumerate}
\vspace*{\fill}
\hspace*{\fill}
\begin{tikzpicture}
\centering
\node[draw, anchor = south] (Rep1) at (0,0) {Rep.1};
  \node[draw, anchor = north, below of = Rep1] (P2) {P2};
    \node[draw, anchor = north, left of = P2] (P1) {P1};
    \node[draw, anchor = north, right of = P2] (P3) {P3};
\draw[->] (Rep1) -- (P2);
\draw[->] (Rep1) -- (P1);
\draw[->] (Rep1) -- (P3);
\end{tikzpicture}
\hspace*{\fill}
\vspace*{\fill}
\end{frame}



\subsection{R Scripting} % - - - - - - - - - - - - - - - - - - - - - - - - - - %

\begin{frame}
\frametitle{Code \Roman{1}}
\begin{itemize}
\item R script written for analysis
\item analyzes on turn-by-turn basis
\item searches for 3 key metrics
  \begin{itemize}
  \item turn density (sentences per turn)
  \item turn length (words per turn)
  \item turn sentiment (sentimental impact per turn)
  \end{itemize}
\end{itemize}
\end{frame}



\begin{frame}
\frametitle{Code \Roman{2}}
\begin{itemize}
\item requirements for this script:
  \begin{itemize}
  \item ``stop words''
  \item ``lemmatizer''
  \item ``sentiment dictionary''
  \end{itemize}
\end{itemize}
\end{frame}



\begin{frame}
\frametitle{Caveat Emptor\dots}
\begin{itemize}
\item Do these resources exist for Ancient Greek?
  \begin{itemize}
    \item \textit{No}
    \item And they typically require whole departments to build
    \item Using translation by GMA Grube and CDC Reeve (1992)
  \end{itemize}
\end{itemize}
\end{frame}



\section{The Study} % -------------------------------------------------------- %

\subsection{Turn Density}  % - - - - - - - - - - - - - - - - - - - - - - - - - %

<<Turn Density, echo = F>>=
### CONSECUTIVE SENTENCES ------------------------------------------------------
# Consecutive Sentences by Turn
republic_turn_conseq <- nested_dialogue %>% 
  add_count(turn) %>%
  distinct(speaker, turn, n)

republic_turn_conseq <- republic_turn_conseq %>%
  add_column(index = c(1:nrow(republic_turn_conseq)),
             .before = "speaker")

# Gather turn Data
cleitophon_conseq <- republic_turn_conseq %>%
  filter(str_detect(speaker, "Cleitophon") == T)
glaucon_conseq <- republic_turn_conseq %>%
  filter(str_detect(speaker, "Glaucon") == T)
polemarchus_conseq <- republic_turn_conseq %>%
  filter(str_detect(speaker, "Polemarchus") == T)
socrates_conseq <- republic_turn_conseq %>%
  filter(str_detect(speaker, "Socrates") == T)
thrasymachus_conseq <- republic_turn_conseq %>%
  filter(str_detect(speaker, "Thrasymachus") == T)

# Generate table from data
dot <- tibble(
  speaker = c("global", "cleitophon", "glaucon", "polemarchus", "socrates", "thrasymacus"),
  mean = c(mean(republic_turn_conseq$n),
                mean(cleitophon_conseq$n),
                mean(glaucon_conseq$n),
                mean(polemarchus_conseq$n),
                mean(socrates_conseq$n),
                mean(thrasymachus_conseq$n)),
  median = c(median(republic_turn_conseq$n),
             median(cleitophon_conseq$n),
             median(glaucon_conseq$n),
             median(polemarchus_conseq$n),
             median(socrates_conseq$n),
             median(thrasymachus_conseq$n)),
  mode = c(find_mode(republic_turn_conseq$n),
           find_mode(cleitophon_conseq$n),
           find_mode(glaucon_conseq$n),
           find_mode(polemarchus_conseq$n),
           find_mode(socrates_conseq$n),
           find_mode(thrasymachus_conseq$n)),
  sd = c(sd(republic_turn_conseq$n),
         sd(cleitophon_conseq$n),
         sd(glaucon_conseq$n),
         sd(polemarchus_conseq$n),
         sd(socrates_conseq$n),
         sd(thrasymachus_conseq$n))
)

rm(cleitophon_conseq,
   glaucon_conseq,
   polemarchus_conseq,
   socrates_conseq,
   thrasymachus_conseq)

# Graph of Turns
turn_conseq <- republic_turn_conseq %>%
  ggplot() +
  scale_fill_manual(values=cbPalette) +
  geom_bar(mapping = aes(x=index, y=n, fill=speaker), stat = "identity") + # prevents geom_bar() from reorganizing
  geom_smooth(mapping = aes(x=index, y=n), se = F, method = "loess") +
  theme(axis.text.x = element_text(angle = 90)) +
  xlab("Turn (Index)") +
  ylab("Sentences")
@

\begin{frame}
\frametitle{Turn Density \Roman{1}}
\begin{itemize}
\item Turn Density: number of sentences per turn
  \begin{itemize}
  \item i.e. consecutive sentences per speaker
  \end{itemize}
\item need a broad picture
  \begin{itemize}
  \item mean, median, mode, standard deviation
  \item global (i.e. across Rep.1)
  \item per speaker
  \end{itemize}
\end{itemize}
\end{frame}



\begin{frame}[fragile]
\frametitle{Turn Density \Roman{2}}
<<echo = F>>=
print(dot)
@
\end{frame}



\begin{frame}
\frametitle{Turn Density \Roman{3}}
\begin{itemize}
\item What does any of that mean?
  \begin{itemize}
  \item Very little until you run it through a t-test
  \item I won't make you suffer that
  \end{itemize}
\end{itemize}
\end{frame}



\begin{frame}
\frametitle{Turn Density \Roman{4}}
\begin{itemize}
\item means, medians, and modes are too regular
  \begin{itemize}
  \item makes sense: call-and-response style
  \end{itemize}
\item statistically significant standard deviations:
  \begin{itemize}
  \item Socrates and Thrasymachus
  \item also widest range of turn densities
  \end{itemize}
\end{itemize}
\end{frame}



\begin{frame}
\frametitle{Turn Density \Roman{5}}
<<echo = F, fig = T>>=
print(turn_conseq)
@
\end{frame}



\subsection{Turn Length} % - - - - - - - - - - - - - - - - - - - - - - - - - - %

<<Turn Length, echo = F>>=
### TURN LENGTHS ---------------------------------------------------------------
# Turn and Sentence Length
# count() is essentially group_by(a, b) %>% summarise(n = n())
# summarise truncates and sorts
# add_count() swaps summarise for mutate, which does neither
# add_count() %>% distinct effectively truncates without resorting
# also adding an index

# Length of Turn by Words
republic_turn_length <- unnested_dialogue %>%
  count(reorder(turn, index), speaker, sort = FALSE)
republic_turn_length <- republic_turn_length  %>%
  add_column(index = c(1:nrow(republic_turn_length)),
             .before = "reorder(turn, index)")

names(republic_turn_length) <- c("index", "turn", "speaker", "length (words)") %>%
  make_clean_names()

republic_turn_length <- republic_turn_length %>% #reorder to match sentence length
  relocate("speaker", .before = "turn")

# Gather turn Data
cleitophon_length <- republic_turn_length %>%
  filter(str_detect(speaker, "Cleitophon") == T)
glaucon_length <- republic_turn_length %>%
  filter(str_detect(speaker, "Glaucon") == T)
polemarchus_length <- republic_turn_length %>%
  filter(str_detect(speaker, "Polemarchus") == T)
socrates_length <- republic_turn_length %>%
  filter(str_detect(speaker, "Socrates") == T)
thrasymachus_length <- republic_turn_length %>%
  filter(str_detect(speaker, "Thrasymachus") == T)

lot <- tibble(
  speaker = c("global", "cleitophon", "glaucon", "polemarchus", "socrates", "thrasymacus"),
  mean = c(mean(republic_turn_length$length_words),
           mean(cleitophon_length$length_words),
           mean(glaucon_length$length_words),
           mean(polemarchus_length$length_words),
           mean(socrates_length$length_words),
           mean(thrasymachus_length$length_words)),
  median = c(median(republic_turn_length$length_words),
             median(cleitophon_length$length_words),
             median(glaucon_length$length_words),
             median(polemarchus_length$length_words),
             median(socrates_length$length_words),
             median(thrasymachus_length$length_words)),
  mode = c(find_mode(republic_turn_length$length_words),
           find_mode(cleitophon_length$length_words),
           find_mode(glaucon_length$length_words),
           find_mode(polemarchus_length$length_words),
           find_mode(socrates_length$length_words),
           find_mode(thrasymachus_length$length_words)),
  sd = c(sd(republic_turn_length$length_words),
         sd(cleitophon_length$length_words),
         sd(glaucon_length$length_words),
         sd(polemarchus_length$length_words),
         sd(socrates_length$length_words),
         sd(thrasymachus_length$length_words))
)

rm(cleitophon_length,
   glaucon_length,
   polemarchus_length,
   socrates_length,
   thrasymachus_length)

# Global Sentence Length Bar Plot - - - - - - - - - - - - - - - - - - - - - - -
# makes a stacked bar plot of turn lengths
# stacks of sentences by length
# Really kills two birds with one stone, but it's a bit informationally dense
# changed republic_sentence_length to " "_turn_" " to clean it up
# changed color and _color_ to fill and _fill_
turn_length <- republic_turn_length %>%
  ggplot() +
  scale_fill_manual(values=cbPalette) +
  geom_bar(mapping = aes(x=index, y=length_words, fill = speaker), stat = "identity") + # prevents geom_bar() from reorganizing
  geom_smooth(mapping = aes(x=index, y=length_words), se = F, method = "loess") +
  theme(axis.text.x = element_text(angle = 90)) +
  xlab("Turn (Index)") +
  ylab("Words")
@

\begin{frame}
\frametitle{Turn Length \Roman{1}}
\begin{itemize}
\item Turn Length: number of words per turn
\item different calculations, same results
  \begin{itemize}
  \item means, medians, modes all too regular
  \item Socrates and Thrasymachus show statistically significant standard deviations
  \end{itemize}
\end{itemize}
\end{frame}



\begin{frame}
\frametitle{Turn Length \Roman{2}}
<<echo = F, fig = T>>=
print(turn_length)
@
\end{frame}



\begin{frame}[fragile]
\frametitle{Turn Size Index \Roman{1}}
<<Turn_Length, echo = F, fig = T>>=
print(turn_length / turn_conseq)
@
\end{frame}



\subsection{Size Index}  % - - - - - - - - - - - - - - - - - - - - - - - - - - %

<<echo = F>>=
### SIZE INDEX -----------------------------------------------------------------
size_index <- c()

for (i in c(1:nrow(republic_turn_conseq))) {
  size_index[i] <-
    mean(c(republic_turn_conseq$n[i],
           republic_turn_length$length_words[i]))

}



### COMBO TABLE ----------------------------------------------------------------
republic_size <- republic_turn_length %>%
  add_column(density = republic_turn_conseq$n, .after="length_words") %>%
  add_column(size_index = size_index, .after="density")
@


\begin{frame}[fragile]
\frametitle{Index \Roman{1}}
\begin{block}{Density / Length Correlation Coefficient}
<<echo = F>>=
cor(republic_turn_conseq$n, republic_turn_length$length_words) %>%
  print()
@
\end{block}
\end{frame}



\begin{frame}
\frametitle{Index \Roman{2}}
\begin{itemize}
\item density and length are closely correlated
\item new variable: Size index
  \begin{itemize}
  \item per-turn average of density and length
  \end{itemize}
\end{itemize}
\end{frame}


%%% THOMAS THESE ARE THE TABLES YOU NEED FOR SIZE INDEXING LATER
%%% FIRST ONE IS A COMPOSIT GEOM_SMOOTH
%%% TOP IS LENGTH, BOTTOM IS DENSITY, MIDDLE DASHED IS SIZE
%%% SECOND ONE IS THE SIZE HISTOGRAM W/ MOVING AVERAGE

\begin{frame}[fragile]
\frametitle{Index \Roman{3}}
<<echo = F, fig = T>>=
ggplot(data = republic_size) +
     geom_smooth(mapping = aes(x=index, y=density), se = F, method = "loess", color = cbPalette[3]) +
     geom_smooth(mapping = aes(x=index, y=length_words), se = F, method = "loess", color = cbPalette[4]) +
     geom_smooth(mapping = aes(x=index, y=size_index), se = F, method = "loess", color = cbPalette[5], linetype = "dashed") +
     theme(axis.text.x = element_text(angle = 90)) +
     xlab("Turn") +
     ylab("Length/Density")
@
\end{frame}



\begin{frame}[fragile]
\frametitle{Index \Roman{4}}
<<echo = F, fig = T>>=
size_index <-  ggplot(data = republic_size) +
     scale_fill_manual(values=cbPalette) +
     geom_bar(mapping = aes(x=index, y=size_index, fill =speaker), stat = "identity") +
     geom_smooth(mapping = aes(x=index, y=size_index), se = F, method = "loess", linetype = "dashed") +
     theme(axis.text.x = element_text(angle = 90)) +
     xlab("Turn") +
     ylab("Size")
print(size_index)
@
\end{frame}

<<echo = F>>=
### SENTIMENTS -----------------------------------------------------------------

# Export to excel to get avg per turn
#unnested_dialogue%>%
#  inner_join(get_sentiments("afinn")) %>%
#  group_by(turn) %>%
#  write.xlsx("republic_afinn.xlsx")

# Create the base tibble
republic_afinn <- unnested_dialogue %>%
  inner_join(get_sentiments("afinn")) %>%
  distinct(speaker, turn)

# Add index
republic_afinn <- republic_afinn %>%
  add_column(index = c(1:nrow(republic_afinn)),
             .before = "speaker")

# Get sentiment
 afinn <- read_excel("/Users/thomasbroadwater/Documents/UGA/Classes/Spring22/Plato/PhasalAnalysis/ThrasymachusPhasalAnalysis/republic_afinn.xlsx", 
                     sheet = "avg")

# Add to tibble
republic_afinn <- republic_afinn %>%
  add_column(afinn)

# Drop excess
republic_afinn <- republic_afinn %>%
  select(index, speaker, turn, avg_sen)

# Rename that ugly final column
# republic_afinn <- republic_afinn %>%
#    rename(avg_sen = avg_sen.avge_sen)
# Doesn't work??? and names() says it's just avg_sen???

### Mean Median Mode and SD
# Gather turn Data
cleitophon_sen <- republic_afinn %>%
  filter(str_detect(speaker, "Cleitophon") == T)
glaucon_sen <- republic_afinn %>%
  filter(str_detect(speaker, "Glaucon") == T)
polemarchus_sen <- republic_afinn %>%
  filter(str_detect(speaker, "Polemarchus") == T)
socrates_sen <- republic_afinn %>%
  filter(str_detect(speaker, "Socrates") == T)
thrasymachus_sen <- republic_afinn %>%
  filter(str_detect(speaker, "Thrasymachus") == T)

sot <- tibble(
  speaker = c("global", "cleitophon", "glaucon", "polemarchus", "socrates", "thrasymacus"),
  mean = c(mean(republic_afinn$avg_sen),
           mean(cleitophon_sen$avg_sen),
           mean(glaucon_sen$avg_sen),
           mean(polemarchus_sen$avg_sen),
           mean(socrates_sen$avg_sen),
           mean(thrasymachus_sen$avg_sen)),
  median = c(median(republic_afinn$avg_sen),
             median(cleitophon_sen$avg_sen),
             median(glaucon_sen$avg_sen),
             median(polemarchus_sen$avg_sen),
             median(socrates_sen$avg_sen),
             median(thrasymachus_sen$avg_sen)),
  mode = c(find_mode(republic_afinn$avg_sen),
           find_mode(cleitophon_sen$avg_sen),
           find_mode(glaucon_sen$avg_sen),
           find_mode(polemarchus_sen$avg_sen),
           find_mode(socrates_sen$avg_sen),
           find_mode(thrasymachus_sen$avg_sen)),
  sd = c(sd(republic_afinn$avg_sen),
         sd(cleitophon_sen$avg_sen),
         sd(glaucon_sen$avg_sen),
         sd(polemarchus_sen$avg_sen),
         sd(socrates_sen$avg_sen),
         sd(thrasymachus_sen$avg_sen))
)

rm(cleitophon_sen,
   glaucon_sen,
   polemarchus_sen,
   socrates_sen,
   thrasymachus_sen)

### CHARTS ---------------------------------------------------------------------
turn_sen <- republic_afinn %>%
  ggplot() +
  scale_fill_manual(values=cbPalette) +
  geom_bar(mapping = aes(x=index, y=avg_sen, fill = speaker), stat = "identity") + # prevents geom_bar() from reorganizing
  geom_smooth(mapping = aes(x=index, y=avg_sen), se = F, method = "loess") +
  theme(axis.text.x = element_text(angle = 90)) +
  xlab("Key") +
  ylab("Avg Sentiment")
@



\subsection{Sentiment Analysis}  % - - - - - - - - - - - - - - - - - - - - - - %

\begin{frame}
\frametitle{Sentiment Analysis \Roman{1}}
\begin{itemize}
\item Sentiment Analysis: measuring vibes
\item AFINN Lexicon
  \begin{itemize}
  \item Ranks sentiment from -5 to +5
  \item $-5$: most negative
  \item $+5$: most positive
  \item $0$: neutral
  \end{itemize}
\end{itemize}
\end{frame}



\begin{frame}[fragile]
\frametitle{Sentiment Analysis \Roman{2}}
<<echo = F>>=
print(sot)
@
\end{frame}



\begin{frame}
\frametitle{Sentiment Analysis \Roman{3}}
\begin{itemize}
\item more interesting results:
  \begin{itemize}
    \item Socrates and Thrasymachus show statistically significant means
    \item Polemarchus, Socrates, and Thrasymachus show statistically significant standard deviations
  \end{itemize}
\end{itemize}
\end{frame}



\begin{frame}[fragile]
\frametitle{Sentiment Analysis \Roman{4}}
<<echo = F, fig = T>>=
print(turn_sen)
@
\end{frame}



\section{The Results} % ------------------------------------------------------ %

\subsection{Bars}  % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - %

\begin{frame}[fragile]
\frametitle{Results \Roman{1}}
<<echo = F, fig = T>>=
print(size_index / turn_sen)
@
\end{frame}


\begin{frame}
\frametitle{Results \Roman{2}}
\begin{itemize}
\item size index shows turning point between x100 and x150
  \begin{itemize}
  \item corresponding points on sentiment chart: x54 and x94
  \item corresponding with 347.d7 T40 and 348.e5 S73
  \end{itemize}
\item sentiment analysis shows slight inverse turning point in same range
\end{itemize}
\end{frame}



\begin{frame}[fragile]
\frametitle{Results \Roman{3}}
<<echo = F>>=
### ZOOMING IN ON TURNING POINTS
size_100 <- ggplot(data = republic_size[c(100:150),]) +
  scale_fill_manual(values=cbPalette[c(2,4,5)]) +
  geom_bar(mapping = aes(x=index, y=size_index, fill =speaker), stat = "identity") +
  geom_smooth(mapping = aes(x=index, y=size_index), se = F, method = "loess", linetype = "dashed") +
  theme(axis.text.x = element_text(angle = 90)) +
  xlab("Turn") +
  ylab("Size")

# T40 : S73 (100 to 149)
# Corresponds to Afinn 54 - 94
# 342d7 - 348e5
# Glaucon jumps in 347e6 (g4)
sen_size_100 <- ggplot(data = republic_afinn[c(54:95),]) +
  scale_fill_manual(values=cbPalette[c(2,4,5)]) +
  geom_bar(mapping = aes(x=index, y=avg_sen, fill = speaker), stat = "identity") + # prevents geom_bar() from reorganizing
  geom_smooth(mapping = aes(x=index, y=avg_sen), se = F, method = "loess") +
  theme(axis.text.x = element_text(angle = 90)) +
  xlab("Key") +
  ylab("Avg Sentiment")
@

<<echo = F, fig = T>>=
print(size_100 / sen_size_100)
@
\end{frame}



\begin{frame}[fragile]
\frametitle{Results \Roman{4}}
<<echo = F>>=
### FIRST TURNING POINTS -------------------------------------------------------
size_100_turn <- ggplot(data = republic_size[c(100:150),]) +
  scale_fill_manual(values=cbPalette[c(2,4,5)]) +
  geom_bar(mapping = aes(x=index, y=size_index, fill =speaker), stat = "identity") +
  geom_smooth(mapping = aes(x=index, y=size_index), se = F, method = "loess", linetype = "dashed") +
  geom_vline(xintercept = 120) +
  geom_vline(xintercept = 132) +
  theme(axis.text.x = element_text(angle = 90)) +
  xlab("Turn") +
  ylab("Size")

sen_size_100_turn <- ggplot(data = republic_afinn[c(54:95),]) +
  scale_fill_manual(values=cbPalette[c(2,4,5)]) +
  geom_bar(mapping = aes(x=index, y=avg_sen, fill = speaker), stat = "identity") + # prevents geom_bar() from reorganizing
  geom_smooth(mapping = aes(x=index, y=avg_sen), se = F, method = "loess") +
  geom_vline(xintercept = 78) +
  theme(axis.text.x = element_text(angle = 90)) +
  xlab("Key") +
  ylab("Avg Sentiment")
@

<<echo = F, fig = T>>=
print(size_100_turn / sen_size_100_turn)
@
\end{frame}



\begin{frame}
\frametitle{Results \Roman{5}}
\begin{itemize}
\item 347.e6 G4 to 348.b6 G8
\item Following Thrasymachus' ``great flood of words'' speech
\end{itemize}

\begin{block}{343.a2 T42}
Tell me, Socrates, do you still have a wet nurse?
\end{block}
\end{frame}

\begin{frame}[fragile]
\frametitle{Results \Roman{6}}
<<echo = F, fig = T>>=
ggplot(data = republic_size) +
     scale_fill_manual(values=cbPalette) +
     geom_bar(mapping = aes(x=index, y=size_index, fill =speaker), stat = "identity") +
     geom_smooth(mapping = aes(x=index, y=size_index), se = F, method = "loess", linetype = "dashed") +
     theme(axis.text.x = element_text(angle = 90)) +
     xlab("Turn") +
     ylab("Size")
@
\end{frame}

\end{document}
